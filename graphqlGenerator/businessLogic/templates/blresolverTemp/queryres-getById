[modn]Query.list[TBn][s] = async (
  _: undefined,
  args: QueryResolvers.ArgsList[TBn][s],
  ctx: Context,
) => {
  const { input } = args;
  const { prisma } = ctx;

  const where: [TBn]WhereInput = {};
  Object.assign(where, input.where);

  return prisma.[tBn][s]({
    where,
    orderBy: input.orderBy ? input.orderBy : 'createdAt_DESC',
    skip: input.skip || undefined,
    after: input.after || undefined,
    before: input.before || undefined,
    first: input.first || undefined,
    last: input.last || undefined,
  });
};

[modn]Query.list[TBn][s]WithPagination = async (
  _: undefined,
  args: QueryResolvers.ArgsList[TBn][s]WithPagination,
  ctx: Context,
) => {
  const { input } = args;
  const { prisma } = ctx;

  const where: [TBn]WhereInput = {};
  Object.assign(where, input.where);

  return prisma.[tBn][s]Connection({
    where,
    orderBy: input.orderBy ? input.orderBy : 'createdAt_DESC',
    skip: input.skip || undefined,
    after: input.after || undefined,
    before: input.before || undefined,
    first: input.first || undefined,
    last: input.last || undefined,
  });
};

[modn]Query.get[TBn]ById = async (
  _: undefined,
  args: QueryResolvers.ArgsGet[TBn]ById,
  ctx: Context,
) => {
  const { input } = args;
  const { prisma } = ctx;

  return prisma.[tBn](input);
};